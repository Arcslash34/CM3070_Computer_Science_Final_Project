/**
 * containers/CertificatesContainer.js — Certificates view-model container
 *
 * Purpose
 * - Orchestrate data and actions for generating demo certificates (CPR, AED, Bleeding).
 * - Gate downloads behind First Aid quiz progress (5/5 perfect) unless demo mode is enabled.
 * - Resolve display name from Supabase profile and AsyncStorage; allow username/name toggle.
 * - Render HTML → PDF via expo-print and share via expo-sharing.
 *
 * Key Behaviours
 * - FIRST_AID_REQUIRED = 5 perfect quiz scores (titles like "First Aid #N").
 * - Demo mode bypass persists in AsyncStorage ("certs:demoMode").
 * - i18n-safe strings: use fallbacks when translation keys equal their ids.
 * - HTML renderer is local to this module; keep here or extract to utils for reuse.
 *
 * Exports
 * - Default React component <CertificatesContainer/> which renders <CertificatesScreen vm={...}/> .
 */

import React, { useEffect, useMemo, useState, useCallback } from "react";
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as Print from "expo-print";
import * as Sharing from "expo-sharing";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import { useNavigation, useRoute } from "@react-navigation/native";

import { supabase } from "../supabase";
import { t } from "../translations/translation";
import CertificatesScreen from "../screens/CertificatesScreen";

// ---------------------------------------------------------------------------
// Constants
// ---------------------------------------------------------------------------
// Available certificates (visual only; unlocking is gated by First Aid progress)
const CERTS = [
  {
    id: "cpr",
    titleKey: "certificates.items.cpr",
    fallback: "CPR Certificate",
    theme: "#6366F1",
  },
  {
    id: "aed",
    titleKey: "certificates.items.aed",
    fallback: "AED Certificate",
    theme: "#10b981",
  },
  {
    id: "bleed",
    titleKey: "certificates.items.bleed",
    fallback: "Severe Bleeding Certificate",
    theme: "#f59e0b",
  },
];

// How many First Aid sets must be perfect
const FIRST_AID_REQUIRED = 5;

// ---------------------------------------------------------------------------
// HTML renderer (kept local; move to utils if you want re-use)
// ---------------------------------------------------------------------------
function renderCertificateHTML({ name, course, accent = "#6366F1", id }) {
  const now = new Date().toLocaleDateString();
  const certId = `${id}-${Math.random()
    .toString(36)
    .slice(2, 8)
    .toUpperCase()}`;

  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>${course}</title>
  <style>
    @page { size: A4 landscape; margin: 28px; }
    html, body { height: 100%; }
    body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;
      color: #0f172a; display: flex; align-items: center; justify-content: center; background: #fff;
    }
    .wrap { width: 88%; border: 2px solid ${accent}; border-radius: 14px; padding: 32px 36px; position: relative; box-sizing: border-box; }
    .watermark { position: absolute; inset: 0; display: flex; align-items: center; justify-content: center;
      font-size: 72px; color: rgba(15,23,42,0.06); transform: rotate(-18deg); letter-spacing: 4px; font-weight: 800; pointer-events: none; }
    .title { text-align: center; font-size: 28px; font-weight: 800; margin: 0; }
    .subtitle { text-align: center; font-size: 13px; color: #334155; margin-top: 6px; }
    .name { margin-top: 42px; font-size: 26px; font-weight: 800; text-align: center; }
    .course { text-align: center; margin-top: 22px; font-size: 16px; color: #334155; }
    .badge { display: inline-block; padding: 6px 12px; border-radius: 999px; background: ${accent}; color: #fff; font-weight: 700; font-size: 12px; }
    .divider { height: 2px; background: ${accent}; width: 84%; margin: 28px auto; border-radius: 2px; }
    .infoRow { display: flex; justify-content: space-between; margin-top: 40px; font-size: 13px; color: #334155; font-weight: 600; }
    .note { margin-top: 18px; font-size: 11px; color: #6b7280; line-height: 1.4; }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="watermark">DEMO ONLY</div>
    <h1 class="title">Certificate of Completion</h1>
    <div class="subtitle">Generated by LifeShield • Project Demo</div>
    <div class="name">${name}</div>
    <div class="course">has successfully completed the <span class="badge">${course}</span></div>
    <div class="divider"></div>
    <div class="infoRow">
      <div>Date of Issue: ${now}</div>
      <div>Certificate ID: ${certId}</div>
    </div>
    <div class="note">
      Disclaimer: This PDF is <strong>not an official certificate</strong>. It is produced solely for demonstration / project purposes.
    </div>
  </div>
</body>
</html>`;
}

// ---------------------------------------------------------------------------
// Component
// ---------------------------------------------------------------------------
export default function CertificatesContainer() {
  const insets = useSafeAreaInsets();
  const navigation = useNavigation();
  const route = useRoute();

  // Display name sources
  const [profileName, setProfileName] = useState(route?.params?.name || "");
  const [username, setUsername] = useState(route?.params?.username || "");
  const [useUsername, setUseUsername] = useState(false);

  // Demo mode bypass
  const [demoMode, setDemoMode] = useState(false);

  // First Aid progress (0..5) + loading state
  const [faPerfectCount, setFaPerfectCount] = useState(0);
  const [loadingProgress, setLoadingProgress] = useState(true);

  // Load display name from profile / AsyncStorage
  useEffect(() => {
    (async () => {
      try {
        if (!profileName || !username) {
          const { data: sessionRes } = await supabase.auth.getSession();
          const userId = sessionRes?.session?.user?.id;

          if (userId) {
            const { data: prof } = await supabase
              .from("profiles")
              .select("name, username")
              .eq("id", userId)
              .single();

            if (prof) {
              if (!profileName) setProfileName(prof.name || "");
              if (!username) setUsername(prof.username || "");
            }
          }

          if (!profileName) {
            const n = (await AsyncStorage.getItem("profile:name")) || "";
            if (n) setProfileName(n);
          }
          if (!username) {
            const u = (await AsyncStorage.getItem("profile:username")) || "";
            if (u) setUsername(u);
          }
        }
      } catch (e) {
        console.warn("Profile load fallback failed:", e);
      }
    })();
  }, [profileName, username]);

  // Restore demo mode
  useEffect(() => {
    (async () => {
      try {
        const raw = await AsyncStorage.getItem("certs:demoMode");
        if (raw === "1") setDemoMode(true);
      } catch (e) {
        console.warn("Failed to load demoMode:", e);
      }
    })();
  }, []);

  // Toggle demo mode (persist)
  const toggleDemoMode = async (v) => {
    setDemoMode(v);
    try {
      await AsyncStorage.setItem("certs:demoMode", v ? "1" : "0");
    } catch (e) {
      console.warn("Failed to save demoMode:", e);
    }
  };

  // Fetch First Aid progress from Supabase (count of #1..#5 with score === 100)
  const loadFirstAidProgress = useCallback(async () => {
    setLoadingProgress(true);
    try {
      const { data: sessionRes } = await supabase.auth.getSession();
      const userId = sessionRes?.session?.user?.id;
      if (!userId) {
        setFaPerfectCount(0);
        return;
      }

      const { data, error } = await supabase
        .from("quiz_results")
        .select("quiz_title, score")
        .eq("user_id", userId)
        .eq("score", 100);

      if (error) throw error;

      const got = new Set();
      (data || []).forEach((r) => {
        const title = String(r.quiz_title || "").toLowerCase();
        if (title.includes("first") && title.includes("aid")) {
          const m = title.match(/#\s*(\d+)/);
          if (m) {
            const n = parseInt(m[1], 10);
            if (Number.isFinite(n) && n >= 1 && n <= FIRST_AID_REQUIRED) {
              got.add(n);
            }
          }
        }
      });

      setFaPerfectCount(Math.min(got.size, FIRST_AID_REQUIRED));
    } catch (e) {
      console.warn("First Aid progress load failed:", e?.message || e);
      setFaPerfectCount(0);
    } finally {
      setLoadingProgress(false);
    }
  }, []);
  useEffect(() => {
    loadFirstAidProgress();
  }, [loadFirstAidProgress]);

  // Which name to display
  const displayName = useMemo(() => {
    const anon =
      t("certificates.anonymous") !== "certificates.anonymous"
        ? t("certificates.anonymous")
        : "Anonymous";
    return useUsername
      ? username || profileName || anon
      : profileName || username || anon;
  }, [useUsername, profileName, username]);

  // Eligibility: demo mode bypasses, otherwise need 5/5
  const isEligible = demoMode || faPerfectCount >= FIRST_AID_REQUIRED;

  // Generate & share certificate PDF
  const onDownload = async (cert) => {
    if (!isEligible) {
      const title =
        t("certificates.unavailableTitle") !== "certificates.unavailableTitle"
          ? t("certificates.unavailableTitle")
          : "Unavailable";
      const body =
        t("certificates.unavailableBody") !== "certificates.unavailableBody"
          ? t("certificates.unavailableBody")
          : "You must score 100% on all five First Aid quizzes (#1–#5) to download this certificate.";
      return alert(`${title}\n\n${body}`);
    }
    try {
      const courseTitle =
        t(cert.titleKey) !== cert.titleKey ? t(cert.titleKey) : cert.fallback;

      const html = renderCertificateHTML({
        name: displayName,
        course: courseTitle,
        accent: cert.theme,
        id: cert.id.toUpperCase(),
      });
      const { uri } = await Print.printToFileAsync({ html });
      await Sharing.shareAsync(uri, {
        dialogTitle:
          t("certificates.shareTitle") !== "certificates.shareTitle"
            ? t("certificates.shareTitle", { title: courseTitle })
            : `Share ${courseTitle}`,
      });
    } catch (e) {
      const title =
        t("common.error") !== "common.error" ? t("common.error") : "Error";
      const body =
        t("certificates.generateFail") !== "certificates.generateFail"
          ? t("certificates.generateFail")
          : "Failed to generate certificate.";
      alert(`${title}\n\n${e?.message || body}`);
    }
  };

  // View-model for screen
  const vm = {
    // i18n + layout
    t,
    insets,

    // nav
    onBack: () => navigation.goBack(),

    // identity
    displayName,
    useUsername,
    setUseUsername,

    // demo/progress
    demoMode,
    toggleDemoMode,
    faPerfectCount,
    FIRST_AID_REQUIRED,
    loadingProgress,

    // list + rules
    CERTS,
    isEligible,

    // actions
    onDownload,
  };

  return <CertificatesScreen vm={vm} />;
}
